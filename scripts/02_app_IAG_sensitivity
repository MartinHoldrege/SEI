// code for a simple test earthengine app. 

// setup/dependencies --------------------------------------------------

var SEI = require("users/mholdrege/SEI:src/SEIModule.js");
var path = 'users/MartinHoldrege/SEI/';

// read in the data -----------------------------------------------------

// image created in 01_SEI_current_IAG-sensitivity.js
var diff = ee.Image(path + 'v11/sensitivity/IAG_v11_2017_2020_90_Current_20230406')
  .updateMask(SEI.mask);

// create maps ----------------------------------------------------------

var vis0 = {min: 0, max: 0.8, palette: ['white', 'black']} // max set to 0.8 b/ thats about the max possible SEI 
var vis = {min: 0, max: 1, palette: ['white', 'black']}
// Initialize the map
var map = ui.Map();

// Set the center of the map
map.centerObject(diff, 6);

// SEI difference maps
var plus5Map = ui.Map.Layer(diff.select('Q5sDiff_plus5'), vis0, 'Change in SEI with + 5 IAG', false);
var plus10Map = ui.Map.Layer(diff.select('Q5sDiff_plus10'), vis0, 'Change in SEI with + 10 IAG', false);
var plus15Map = ui.Map.Layer(diff.select('Q5sDiff_plus15'), vis0, 'Change in SEI with + 15 IAG', false);

// Q3 (annuals q value) difference maps
var plus5MapQ3 = ui.Map.Layer(diff.select('Q3rawDiff_plus5'), vis, 'Change in Q of annuals with + 5 annuals', false);
var plus10MapQ3 = ui.Map.Layer(diff.select('Q3rawDiff_plus10'), vis, 'Change in Q of annuals with + 10 annuals', false);
var plus15MapQ3 = ui.Map.Layer(diff.select('Q3rawDiff_plus15'), vis, 'Change in Q of annuals with + 15 annuals', false);

map.add(plus5Map);
map.add(plus10Map);
map.add(plus15Map);
map.add(plus5MapQ3);
map.add(plus10MapQ3);
map.add(plus15MapQ3);

// Create checkboxes for each layer
var plus5Checkbox = ui.Checkbox('Change in SEI with + 5 annuals', false);
var plus10Checkbox = ui.Checkbox('Change in SEI with + 10 annuals', false);
var plus15Checkbox = ui.Checkbox('Change in SEI with + 15 annuals', false);
var plus5CheckboxQ3 = ui.Checkbox('Change in Q of annuals with + 5 annuals', false);
var plus10CheckboxQ3 = ui.Checkbox('Change in Q of annuals with + 10 annuals', false);
var plus15CheckboxQ3 = ui.Checkbox('Change in Q of annuals with + 15 annuals', false);

// Create a function to update the map layers when the checkboxes are toggled
var updateMapLayers = function() {
  plus5Map.setShown(plus5Checkbox.getValue());
  plus10Map.setShown(plus10Checkbox.getValue());
  plus15Map.setShown(plus15Checkbox.getValue());
  plus5MapQ3.setShown(plus5CheckboxQ3.getValue());
  plus10MapQ3.setShown(plus10CheckboxQ3.getValue());
  plus15MapQ3.setShown(plus15CheckboxQ3.getValue());
};

// Add the checkboxes to the map and register the function to be called when they are toggled
var plus5Panel = ui.Panel([plus5Checkbox], ui.Panel.Layout.Flow('horizontal'));
var plus10Panel = ui.Panel([plus10Checkbox], ui.Panel.Layout.Flow('horizontal'));
var plus15Panel = ui.Panel([plus15Checkbox], ui.Panel.Layout.Flow('horizontal'));
var plus5PanelQ3 = ui.Panel([plus5CheckboxQ3], ui.Panel.Layout.Flow('horizontal'));
var plus10PanelQ3 = ui.Panel([plus10CheckboxQ3], ui.Panel.Layout.Flow('horizontal'));
var plus15PanelQ3 = ui.Panel([plus15CheckboxQ3], ui.Panel.Layout.Flow('horizontal'));


var layersPanel = ui.Panel([plus5Panel, plus10Panel, plus15Panel,
  plus5PanelQ3, plus10PanelQ3,plus15PanelQ3]);
  
  
layersPanel.style().set({position: 'top-right'});
map.add(layersPanel);
plus5Checkbox.onChange(updateMapLayers);
plus10Checkbox.onChange(updateMapLayers);
plus15Checkbox.onChange(updateMapLayers);
plus5CheckboxQ3.onChange(updateMapLayers);
plus10CheckboxQ3.onChange(updateMapLayers);
plus15CheckboxQ3.onChange(updateMapLayers);

// Display the map
ui.root.widgets().reset([map]);


// display legend ---------------------------------------------------------------------
// Add the legend to the map
// var legend = ui.Panel({
//   style: {
//     position: 'bottom-right',
//     padding: '8px 15px'
//   }
// });
// map.add(legend);

// // Create the legend title
// var legendTitle = ui.Label({
//   value: 'Legend',
//   style: {
//     fontWeight: 'bold',
//     fontSize: '18px',
//     margin: '0 0 4px 0',
//     padding: '0'
//   }
// });
// legend.add(legendTitle);

// // Create the legend image
// var lon = ee.Image.pixelLonLat().select('longitude');
// var gradient = lon.multiply((vis.max - vis.min)/100);
// var gradient = ee.Image.constant(0).addBands(ee.Image.constant(1)).visualize({
//   min: vis.min,
//   max: vis.max,
//   palette: vis.palette
// });
// var legendImage = gradient.visualize(vis);
// var thumbnail = ui.Thumbnail({
//   image: legendImage,
//   params: {bbox:'0,0,10,100', dimensions:'10x50'},
//   style: {padding: '1px', position: 'bottom-center'}
// });
// legend.add(thumbnail);

// // Create the legend labels
// var legendLabels = ui.Panel({
//   style: {
//     position: 'bottom-right'
//   }
// });
// legend.add(legendLabels);


// // Create the min/max labels
// var legendMin = ui.Label({
//   value: vis.min,
//   style: {
//     fontSize: '12px',
//     margin: '0 0 4px 0',
//     padding: '0'
//   }
// });
// legendLabels.add(legendMin);

// var legendMax = ui.Label({
//   value: vis.max,
//   style: {
//     fontSize: '12px',
//     margin: '0 0 4px 6px',
//     padding: '0'
//   }
// });
// legendLabels.add(legendMax);